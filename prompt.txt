import React, { useEffect, useState } from 'react'
import { toast } from 'sonner'
import { Input } from '@/components/ui/input'
import axios from 'axios'
import { backendUrl } from '../App'
import { Banners } from '@/components/setting/Banners'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"


const Settings = ({ token }) => {
  const [settings, setSettings] = useState({
    currency: { name: '', sign: '' },
    email: { notifications: '' },
    images: { hero: [], banner: '' },
    text: { banner: '' },
    link: {
      productId: '',
      category: '',
      subcategory: '',
      subsubcategory: ''
    }
  })
  const [heroFiles, setHeroFiles] = useState([])
  const [bannerFile, setBannerFile] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [bannerText, setBannerText] = useState('')  
  const [linkType, setLinkType] = useState('product');
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState({});
  const [isUpdating, setIsUpdating] = useState(false);
  const [selectedLink, setSelectedLink] = useState({
    productId: '',
    category: '',
    subcategory: '',
    subsubcategory: ''
  });
  const [heroText, setHeroText] = useState('')
  const [heroLinkType, setHeroLinkType] = useState('product')
  const [selectedHeroLink, setSelectedHeroLink] = useState({
    productId: '',
    category: '',
    subcategory: '',
    subsubcategory: ''
  })

  // Add this useEffect to handle settings initialization
  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await axios.get(`${backendUrl}/api/settings`, {
          headers: { token }
        })
        if (response.data.success) {
          const settings = response.data.settings
          setSettings(settings)
          setBannerText(settings.text?.banner || '')
          setHeroText(settings.text?.hero || '')
          
          // Initialize hero link data
          if (settings.herolink) {
            const newHeroLinkType = settings.herolink.productId ? 'product' : 'category'
            setHeroLinkType(newHeroLinkType)
            setSelectedHeroLink({
              productId: settings.herolink.productId || '',
              category: settings.herolink.category || '',
              subcategory: settings.herolink.subcategory || '',
              subsubcategory: settings.herolink.subsubcategory || ''
            })
          }
        }
      } catch (error) {
        toast.error('Failed to fetch settings')
      }
    }

    fetchSettings()
  }, [])

  const handleSubmit = async (e) => {
    e.preventDefault()
    setIsLoading(true)

    try {
      const formData = new FormData()
      formData.append('currency[name]', settings.currency.name)
      formData.append('currency[sign]', settings.currency.sign)
      formData.append('email[notifications]', settings.email.notifications)
      
      // Handle text updates
      formData.append('text[banner]', bannerText)
      formData.append('text[hero]', heroText)
      
      // Handle link updates
      formData.append('link', JSON.stringify({
        productId: selectedLink.productId || '',
        category: selectedLink.category || '',
        subcategory: selectedLink.subcategory || '',
        subsubcategory: selectedLink.subsubcategory || ''
      }))

      // Handle hero link updates
      formData.append('herolink', JSON.stringify({
        productId: selectedHeroLink.productId || '',
        category: selectedHeroLink.category || '',
        subcategory: selectedHeroLink.subcategory || '',
        subsubcategory: selectedHeroLink.subsubcategory || ''
      }))
      
      // Handle image uploads
      heroFiles.forEach(file => {
        formData.append('hero', file)
      })
      
      // Handle banner image
      if (bannerFile) {
        formData.append('banner', bannerFile)
      }

      const response = await axios.put(`${backendUrl}/api/settings`, formData, {
        headers: { 
          token,
          'Content-Type': 'multipart/form-data'
        }
      })

      if (response.data.success) {
        setSettings(response.data.settings)
        setBannerText(response.data.settings.text.banner)
        setHeroText(response.data.settings.text.hero)
        toast.success('Settings updated successfully')
      }
    } catch (error) {
      toast.error('Failed to update settings')
    } finally {
      setIsLoading(false)
    }
  }

  const handleHeroImagesChange = (e) => {
    const files = Array.from(e.target.files)
    if (files.length > 5) {
      toast.error('Maximum 5 hero images allowed')
      return
    }
    setHeroFiles(files)
  }

  const BannerLinkSection = () => (
    <div className="space-y-4">
      <h3 className="text-md font-medium">Banner Link Settings</h3>
      <div className="space-y-3">
        <div>
          <label className="block text-sm mb-2">Link Type</label>
          <Select 
            value={linkType} 
            onValueChange={handleLinkTypeChange}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select link type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="product">Product Link</SelectItem>
              <SelectItem value="category">Category Link</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Show current selection summary */}
        {(selectedLink.productId || selectedLink.category) && (
          <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded">
            <p className="font-medium">Current Selection:</p>
            {selectedLink.productId && (
              <p>Product: {products.find(p => p._id === selectedLink.productId)?.name}</p>
            )}
            {selectedLink.category && (
              <p>
                {selectedLink.category}
                {selectedLink.subcategory && ` > ${selectedLink.subcategory}`}
                {selectedLink.subsubcategory && ` > ${selectedLink.subsubcategory}`}
              </p>
            )}
          </div>
        )}

        {linkType === 'product' ? (
          <div>
            <label className="block text-sm mb-2">Select Product</label>
            <Select 
              value={selectedLink.productId || ''} 
              onValueChange={(value) => handleLinkChange('productId', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Choose a product" />
              </SelectTrigger>
              <SelectContent>
                {products.map(product => (
                  <SelectItem key={product._id} value={product._id}>
                    <img className='size-8' src={product.image[0]}/>
                    {product.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        ) : (
          <div className="space-y-3">
            <div>
              <label className="block text-sm mb-2">Category</label>
              <Select 
                value={selectedLink.category || ''} 
                onValueChange={(value) => handleLinkChange('category', value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {(Array.isArray(categories) ? categories : []).map(category => (
                    <SelectItem key={category.key || category.name} value={category.name}>{category.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {selectedLink.category && (
              <div>
                <label className="block text-sm mb-2">Subcategory</label>
                <Select 
                  value={selectedLink.subcategory || ''} 
                  onValueChange={(value) => handleLinkChange('subcategory', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select subcategory" />
                  </SelectTrigger>
                  <SelectContent>
                    {(Array.isArray(categories)
                      ? (categories.find(cat => cat.name === selectedLink.category)?.subcategories || [])
                      : []
                    ).map(sub => (
                      <SelectItem key={sub.name} value={sub.name}>{sub.name}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}

            {selectedLink.subcategory && (
              <div>
                <label className="block text-sm mb-2">Second Level Category</label>
                <Select 
                  value={selectedLink.subsubcategory || ''} 
                  onValueChange={(value) => handleLinkChange('subsubcategory', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select second level category" />
                  </SelectTrigger>
                  <SelectContent>
                    {(Array.isArray(categories)
                      ? (
                        categories
                          .find(cat => cat.name === selectedLink.category)
                          ?.subcategories?.find(sub => sub.name === selectedLink.subcategory)
                          ?.subcategories || []
                      )
                      : []
                    ).map(subSub => (
                      <SelectItem key={subSub.name} value={subSub.name}>
                        {subSub.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );

  const handleLinkChange = async (field, value) => {
    setIsUpdating(true);
    try {
      // Prepare the new link state
      const newSelectedLink = {
        ...selectedLink,
        [field]: value
      };

      // Clear subsequent fields when changing higher level categories
      if (field === 'category') {
        newSelectedLink.subcategory = '';
        newSelectedLink.subsubcategory = '';
      } else if (field === 'subcategory') {
        newSelectedLink.subsubcategory = '';
      }

      // Update local state first
      setSelectedLink(newSelectedLink);

      // Prepare the update data
      const updateData = {
        linkType,
        ...newSelectedLink
      };

      // Send update to server
      const response = await axios.put(
        `${backendUrl}/api/settings/banner-link`,
        updateData,
        { headers: { token } }
      );

      if (response.data.success) {
        setSettings(response.data.settings);
        toast.success('Banner link updated successfully');
      }
    } catch (error) {
      toast.error('Failed to update banner link');
      // Revert to previous state on error
      setSelectedLink(selectedLink);
    } finally {
      setIsUpdating(false);
    }
  };

  const HeroLinkSection = () => (
    <div className="space-y-4">
      <h3 className="text-md font-medium">Hero Link Settings</h3>
      <div className="space-y-3">
        <div>
          <label className="block text-sm mb-2">Hero Text</label>
          <Input
            type="text"
            value={heroText}
            placeholder="Enter hero text"
            onChange={(e) => setHeroText(e.target.value)}
            className="mb-2"
          />
          {settings.text.hero && heroText !== settings.text.hero && (
            <p className="text-sm text-gray-500">
              Current text: {settings.text.hero}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm mb-2">Link Type</label>
          <Select 
            value={heroLinkType} 
            onValueChange={handleHeroLinkTypeChange}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select link type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="product">Product Link</SelectItem>
              <SelectItem value="category">Category Link</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Show current selection summary */}
        {(selectedHeroLink.productId || selectedHeroLink.category) && (
          <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded">
            <p className="font-medium">Current Selection:</p>
            {selectedHeroLink.productId && (
              <p>Product: {products.find(p => p._id === selectedHeroLink.productId)?.name}</p>
            )}
            {selectedHeroLink.category && (
              <p>
                {selectedHeroLink.category}
                {selectedHeroLink.subcategory && ` > ${selectedHeroLink.subcategory}`}
                {selectedHeroLink.subsubcategory && ` > ${selectedHeroLink.subsubcategory}`}
              </p>
            )}
          </div>
        )}

        {heroLinkType === 'product' ? (
          <div>
            <label className="block text-sm mb-2">Select Product</label>
            <Select 
              value={selectedHeroLink.productId || ''} 
              onValueChange={(value) => handleHeroLinkChange('productId', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Choose a product" />
              </SelectTrigger>
              <SelectContent>
                {products.map(product => (
                  <SelectItem key={product._id} value={product._id}>
                    <div className="flex items-center gap-2">
                      <img className='size-8' src={product.image[0]} alt={product.name}/>
                      <span>{product.name}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        ) : (
          <div className="space-y-3">
            <div>
              <label className="block text-sm mb-2">Category</label>
              <Select 
                value={selectedHeroLink.category || ''} 
                onValueChange={(value) => handleHeroLinkChange('category', value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {(Array.isArray(categories) ? categories : []).map(category => (
                    <SelectItem key={category.name} value={category.name}>{category.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {selectedHeroLink.category && (
              <div>
                <label className="block text-sm mb-2">Subcategory</label>
                <Select 
                  value={selectedHeroLink.subcategory || ''} 
                  onValueChange={(value) => handleHeroLinkChange('subcategory', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select subcategory" />
                  </SelectTrigger>
                  <SelectContent>
                    {(Array.isArray(categories)
                      ? (categories.find(cat => cat.name === selectedHeroLink.category)?.subcategories || [])
                      : []
                    ).map(sub => (
                      <SelectItem key={sub.name} value={sub.name}>{sub.name}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}

            {selectedHeroLink.subcategory && (
              <div>
                <label className="block text-sm mb-2">Second Level Category</label>
                <Select 
                  value={selectedHeroLink.subsubcategory || ''} 
                  onValueChange={(value) => handleHeroLinkChange('subsubcategory', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select second level category" />
                  </SelectTrigger>
                  <SelectContent>
                    {(Array.isArray(categories)
                      ? (
                        categories
                          .find(cat => cat.name === selectedHeroLink.category)
                          ?.subcategories?.find(sub => sub.name === selectedHeroLink.subcategory)
                          ?.subcategories || []
                      )
                      : []
                    ).map(subSub => (
                      <SelectItem key={subSub.name} value={subSub.name}>{subSub.name}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );

  const handleLinkTypeChange = (value) => {
    setLinkType(value);
    
    // Keep existing values but clear the other type's values
    if (value === 'product') {
      setSelectedLink(prev => ({
        ...prev,
        productId: prev.productId || '', // Keep product ID if exists
        category: '',
        subcategory: '',
        subsubcategory: ''
      }));
    } else {
      setSelectedLink(prev => ({
        ...prev,
        productId: '',
        category: prev.category || '', // Keep category if exists
        subcategory: prev.subcategory || '', // Keep subcategory if exists
        subsubcategory: prev.subsubcategory || '' // Keep subsubcategory if exists
      }));
    }
  };

  const handleHeroLinkTypeChange = (value) => {
    setHeroLinkType(value)
    
    if (value === 'product') {
      setSelectedHeroLink(prev => ({
        ...prev,
        productId: prev.productId || '',
        category: '',
        subcategory: '',
        subsubcategory: ''
      }))
    } else {
      setSelectedHeroLink(prev => ({
        ...prev,
        productId: '',
        category: prev.category || '',
        subcategory: prev.subcategory || '',
        subsubcategory: prev.subsubcategory || ''
      }))
    }
  }

  const handleHeroLinkChange = async (field, value) => {
    setIsUpdating(true)
    try {
      const newSelectedHeroLink = {
        ...selectedHeroLink,
        [field]: value
      }

      if (field === 'category') {
        newSelectedHeroLink.subcategory = ''
        newSelectedHeroLink.subsubcategory = ''
      } else if (field === 'subcategory') {
        newSelectedHeroLink.subsubcategory = ''
      }

      setSelectedHeroLink(newSelectedHeroLink)

      const updateData = {
        linkType: heroLinkType,
        ...newSelectedHeroLink
      }

      const response = await axios.put(
        `${backendUrl}/api/settings/hero-link`,
        updateData,
        { headers: { token } }
      )

      if (response.data.success) {
        setSettings(response.data.settings)
        toast.success('Hero link updated successfully')
      }
    } catch (error) {
      toast.error('Failed to update hero link')
      setSelectedHeroLink(selectedHeroLink)
    } finally {
      setIsUpdating(false)
    }
  }

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [productsRes, categoriesRes] = await Promise.all([
          axios.get(`${backendUrl}/api/product/list`, { headers: { token } }),
          axios.get(`${backendUrl}/api/categories`)
        ]);

        if (productsRes.data.success) {
          setProducts(productsRes.data.products);
        }
        if (categoriesRes.data.success) {
          setCategories(categoriesRes.data.categories);
        }
      } catch (error) {
        toast.error('Failed to fetch data');
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (settings.link) {
      // Determine link type based on which fields are populated
      const newLinkType = settings.link.productId ? 'product' : 'category';
      setLinkType(newLinkType);
      
      // Update selected link state
      setSelectedLink({
        productId: settings.link.productId || '',
        category: settings.link.category || '',
        subcategory: settings.link.subcategory || '',
        subsubcategory: settings.link.subsubcategory || ''
      });
    }
  }, [settings.link]);

  useEffect(() => {
    if (settings.text.banner) {
      setBannerText(settings.text.banner)
    }
  }, [settings.text.banner])

  useEffect(() => {
    if (settings.text.hero) {
      setHeroText(settings.text.hero)
    }
    if (settings.herolink) {
      const newHeroLinkType = settings.herolink.productId ? 'product' : 'category'
      setHeroLinkType(newHeroLinkType)
      setSelectedHeroLink({
        productId: settings.herolink.productId || '',
        category: settings.herolink.category || '',
        subcategory: settings.herolink.subcategory || '',
        subsubcategory: settings.herolink.subsubcategory || ''
      })
    }
  }, [settings.text.hero, settings.herolink])

  return (
    <div className="p-4 sm:p-6 max-w-2xl">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-4">
          <h2 className="text-lg font-semibold">Currency Settings</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm mb-2">Currency Name</label>
              <Input
                value={settings.currency.name}
                onChange={(e) => setSettings({
                  ...settings,
                  currency: { ...settings.currency, name: e.target.value }
                })}
                placeholder="USD"
              />
            </div>
            <div>
              <label className="block text-sm mb-2">Currency Sign</label>
              <Input
                value={settings.currency.sign}
                onChange={(e) => setSettings({
                  ...settings,
                  currency: { ...settings.currency, sign: e.target.value }
                })}
                placeholder="$"
              />
            </div>
          </div>
        </div>

        <div className="space-y-4">
          <h2 className="text-lg font-semibold">Notification Settings</h2>
          <div>
            <label className="block text-sm mb-2">Notification Email</label>
            <Input
              type="email"
              value={settings.email.notifications}
              onChange={(e) => setSettings({
                ...settings,
                email: { ...settings.email, notifications: e.target.value }
              })}
              placeholder="notifications@example.com"
            />
          </div>
        </div>

        <div className="space-y-4">
          <h2 className="text-lg font-semibold">Image Settings</h2>
          <div className="space-y-6">
            <div>
              <label className="block text-sm mb-2">Hero Images (up to 5)</label>
              <Input
                type="file"
                accept="image/*"
                multiple
                onChange={handleHeroImagesChange}
                className="mb-4"
              />
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                {settings.images.hero.map((image, index) => (
                  <div key={index} className="relative group">
                    <img 
                      src={`${image}`}
                      alt={`Hero ${index + 1}`}
                      className="w-full h-40 object-cover rounded-lg"
                    />
                    <button
                      onClick={() => {
                        const newHeroImages = settings.images.hero.filter((_, i) => i !== index)
                        setSettings({
                          ...settings,
                          images: { ...settings.images, hero: newHeroImages }
                        })
                      }}
                      className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full 
                               opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      ×
                    </button>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm mb-2">Banner Image</label>
              <Input
                type="file"
                accept="image/*"
                onChange={(e) => setBannerFile(e.target.files[0])}
              />
              <div>
                <label className="block text-sm mb-2">Banner Text</label>
                <Input
                  type="text"
                  value={bannerText}
                  placeholder="Enter banner text"
                  onChange={(e) => setBannerText(e.target.value)}
                  className="mb-2"
                />
                {settings.text.banner && bannerText !== settings.text.banner && (
                  <p className="text-sm text-gray-500">
                    Current text: {settings.text.banner}
                  </p>
                )}
              </div>
              {settings.images.banner && (
                <img 
                  src={`${settings.images.banner}`}
                  alt="Banner"
                  className="mt-2 max-w-full h-auto"
                />
              )}
            </div>

          </div>
        </div>

        <div className="space-y-4">
          <BannerLinkSection />
        </div>

        <div className="space-y-6">
          <HeroLinkSection />
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className="mt-6 w-full sm:w-auto px-6 py-2 bg-black text-white rounded-lg 
                   hover:bg-gray-800 disabled:opacity-50"
        >
          {isLoading ? 'Saving...' : 'Save Settings'}
        </button>
      </form>
    </div>
  )
}

export default Settings